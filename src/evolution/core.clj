(ns evolution.core
  (:require [genotype-generator.gennadiy :as gena] ; –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ–Ω–æ—Ç–∏–ø–æ–≤
            [genotype-mutator.mutoslav :as mutya] ; –º—É—Ç–∞—Ç–æ—Ä –≥–µ–Ω–æ—Ç–∏–ø–æ–≤
            [construct-creature.konstraktin :as kostya] ; —Å–æ–∑–¥–∞—ë—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≥–µ–Ω–æ—Ç–∏–ø—É
            [compare-genotypes.compare :as comp] ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º
            [clojure.java.io :as io] ; —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
            [clojure.edn :as edn])) ; —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö

;; –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
(def output-dir "evolution_results") ; –∏–º—è –ø–∞–ø–∫–∏
(io/make-parents (str output-dir "/placeholder")) ; —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

(defn move-to-output [file]
  (let [dest (str output-dir "/" (.getName (io/file file)))] ; –Ω–æ–≤—ã–π –ø—É—Ç—å
    (io/copy (io/file file) (io/file dest)) ; –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
    (io/delete-file file) ; —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π
    dest)) ; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å

(defn generate-images [genotypes iteration]
  (map-indexed (fn [idx genotype] ; –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–µ–Ω–æ—Ç–∏–ø–∞
                 (let [temp-file "biomorph.png"
                       _ (kostya/-main (pr-str genotype)) ; —Å–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                       final-file (str "biomorph_" iteration "_" idx ".png") ; –Ω–æ–≤–æ–µ –∏–º—è
                       moved-file (move-to-output temp-file) ; –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –ø–∞–ø–∫—É
                       renamed-file (str output-dir "/" final-file) ; –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                       _ (.renameTo (io/file moved-file) (io/file renamed-file)) ; –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                       distance (comp/-main renamed-file "target.png")] ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ü–µ–ª–µ–≤—ã–º
                   {:genotype genotype ; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–µ–Ω–æ—Ç–∏–ø,
                    :image renamed-file ; –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                    :distance distance})) ; –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
               genotypes))

(defn find-best [evaluations]
  (let [best (apply min-key :distance evaluations)] ; –≤—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
    (println "\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:")
    (doseq [{:keys [image distance]} (sort-by :distance evaluations)] ; —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
      (println (format "  %s - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %.3f" 
                      (.getName (io/file image)) 
                      distance)))
    best)) ; –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç

(defn -main [& args]
  (when (or (empty? args) (< (count args) 2)) ; –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    (println "–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å: clojure -M -m evolution.core <num-genotypes> <max-stagnant-iterations>")
    (System/exit 1))
  
  (let [num-genotypes (Integer/parseInt (first args)) ; —á–∏—Å–ª–æ –≥–µ–Ω–æ—Ç–∏–ø–æ–≤ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é
        max-stagnant (Integer/parseInt (second args))] ; –º–∞–∫—Å. –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π
    (loop [iteration 0 ; –Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏
           stagnant-count 0 ; —Å—á—ë—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ —É–ª—É—á—à–µ–Ω–∏–π
           current-genotypes (repeatedly num-genotypes gena/-main) ; –Ω–∞—á–∞–ª—å–Ω—ã–µ –≥–µ–Ω–æ—Ç–∏–ø—ã
           best-distance Double/MAX_VALUE ; –ª—É—á—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
           best-genotype nil ; –ª—É—á—à–∏–π –≥–µ–Ω–æ—Ç–∏–ø
           best-image nil ; –ª—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
           previous-distance Double/MAX_VALUE ; —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
           previous-genotype nil] ; –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–µ–Ω–æ—Ç–∏–ø–∞
      
      ;; –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
      (println (format "\n=== –ò—Ç–µ—Ä–∞—Ü–∏—è %d === (–ó–∞—Å—Ç–æ–π: %d/%d)" 
                      iteration stagnant-count max-stagnant))
      
      ;; –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      (let [evaluations (generate-images current-genotypes iteration)
            {:keys [genotype image distance] :as best} (find-best evaluations)]
               
        ;; –í—ã–≤–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
        (println "\nüèÜ –õ—É—á—à–∏–π –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏:")
        (println (format "  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: %s" (.getName (io/file image))))
        (println (format "  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %.3f" distance))
        (println (format "  –ì–µ–Ω–æ—Ç–∏–ø: %s" (pr-str genotype)))
        
        ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è:
        (cond
        ;; 1. –ù–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = 0)
        (zero? distance)
        (do (println "\nüéâ –£–°–ü–ï–•: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!")
            (println "   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:" (.getName (io/file image)))
            (System/exit 0))
        
        ;; 2. –°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π
        (>= stagnant-count max-stagnant)
        (do (println (format "\n‚õî –ü—Ä–æ–≤–∞–ª: –ù–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π –∑–∞ %d –∏—Ç–µ—Ä–∞—Ü–∏–π" max-stagnant))
            (println "   –õ—É—á—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:" best-distance)  
            (println "   –õ—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:" (when best-image (.getName (io/file best-image))))
            (System/exit 1))
        
        ;; 3. –ù–∞—à–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ
        (< distance best-distance)
        (do (println (format "\n‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! (–ü—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É—á—à–∏–π: %.3f)" best-distance))
            (recur (inc iteration) ; –Ω–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
                    0 ; —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞—Å—Ç–æ—è
                    (repeatedly num-genotypes #(mutya/-main (pr-str genotype))) ; –º—É—Ç–∏—Ä—É–µ–º –ª—É—á—à–∏–π –≥–µ–Ω–æ—Ç–∏–ø
                    distance  ; –Ω–æ–≤–æ–µ –ª—É—á—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    genotype  ; –Ω–æ–≤—ã–π –ª—É—á—à–∏–π –≥–µ–Ω–æ—Ç–∏–ø
                    image   ; –Ω–æ–≤–æ–µ –ª—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    best-distance ; –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ª—É—á—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    best-genotype ; –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É—á—à–∏–π –≥–µ–Ω–æ—Ç–∏–ø
            ))

        ;; 4. –£–ª—É—á—à–µ–Ω–∏–π –Ω–µ—Ç
        :else
;        (do (println "\n‚û° –£–ª—É—á—à–µ–Ω–∏–π –Ω–µ—Ç. –ú—É—Ç–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª—É—á—à–∏–π –≥–µ–Ω–æ—Ç–∏–ø...")
;            (recur (inc iteration)
;                    (inc stagnant-count) ; —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∑–∞—Å—Ç–æ—è
;                    (repeatedly num-genotypes #(mutya/-main (pr-str best-genotype))) ; –º—É—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É—á—à–∏–π
;                    best-distance
;                    best-genotype
;                    best-image)))))))
        (let [best-of-two (if (< previous-distance distance)
        previous-genotype
        genotype)]
        (println (format "\n‚û°–£–ª—É—á—à–µ–Ω–∏–π –Ω–µ—Ç. –ú—É—Ç–∏—Ä—É—é –ª—É—á—à–∏–π –∏–∑ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π: %.3f..."
        (min previous-distance distance)))
          (recur (inc iteration)
                  (inc stagnant-count)
                  (repeatedly num-genotypes #(mutya/-main (pr-str best-of-two)))
                  best-distance
                  best-genotype
                  best-image
                  distance ; —Ç–µ–∫—É—â–µ–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–º
                  genotype))))))) ; —Ç–µ–∫—É—â–∏–π —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–º